1) Create Folders
- base (directory)
- configfiles (directory)
- pages (directory)
- reports (directory)
- screenshot (folder)
- testCases (directory)
- testdata (folder)
- utilities (directory)

2) Create a conftest config file
3) Define a method def setup():
4) Externalise the driver and browserr launch in this method
5) add @pytest.fixutre(scope=""), define level in scope class, method, session refer pytest docs
6) recoginise the driver instance linkage to all cases use request fixture (The request fixture is a special fixture providing information of the requesting test function.)
7) @pytest.fixture(scope="session")
def setup(request):
    global driver
    #chrome-
    options = webdriver.ChromeOptions()
    options.add_experimental_option('detach', True)
    driver = webdriver.Chrome(options=options)

    #browser launch and login to benzinga
    driver.maximize_window()
    driver.get("https://www.benzinga.com/login/")
    wait = WebDriverWait(driver, 20)
    wait.until(EC.element_to_be_clickable((By.ID, "email"))).click()
    driver.find_element(By.ID, "email").send_keys("sankalpsaxena@benzinga.com")
    driver.find_element(By.ID, "current-password").send_keys("Wisdom21#")
    # click on login button
    driver.find_element(By.XPATH, "/html/body/div[1]/div/div/div/div/div/div/div[3]/form/div[3]/button").click()
    # click on benzinga.com link
    wait.until(EC.visibility_of_element_located((By.XPATH, "/html/body/div[1]/div[2]/div/div[1]/a"))).click()

    # request.cls.driver = driver  #to use when scope is class in fixture
    # request.cls.wait = wait # to use when scope is class in fixture
    session = request.node
    for item in session.items:
        cls = item.getparent(pytest.Class)
        setattr(cls.obj, "driver", driver)
        setattr(cls.obj, "wait", wait)

    yield
    driver.close()
8) In test case file, add fixture - @pytest.mark.usefixtures("setup") above class name
9) Create a pageobject file and add the test case there (refer https://www.youtube.com/watch?v=rpu2SdJKg3c&list=PLL34mf651faPOf5PE5YjYgTRITzVzzvMz&index=102)]
10) In page object file add constructor with driver as parameter :
 class BenzingaComLandingPage():
       def __init__(self, driver, wait):
            self.driver = driver
            self.wait = wait
11) In testcase file create an object of page object class and pass self.driver as an argument
12) access the test methods using class object
13) Create a base class (base driver) which includes all resuable codes like logs, scroll etc
    class BaseDriver:
    def __init__(self, driver):
        self.driver = driver

    def page_scroll(self):
            pageLength = self.driver.execute_script(
                "window.scrollTo(0, document.body.scrollHeight);var pageLength=document.body.scrollHeight;return pageLength;")
            match = False
            while (match == False):
                lastCount = pageLength
                time.sleep(1)
                pageLength = self.driver.execute_script(
                    "window.scrollTo(0, document.body.scrollHeight);var pageLength=document.body.scrollHeight;return pageLength;")
                if lastCount == pageLength:
                    match = True
            time.sleep(4)
14)


Selenium Python Tutorial #56 - Create Test Automation Framework- Part 11